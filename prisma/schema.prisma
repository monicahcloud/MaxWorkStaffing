

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(cuid()) // internal DB ID
  clerkId   String   @unique              // Clerk-provided user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  resumes   Resume[] // optional relationship if you want to link them
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resume {
id String @id @default(cuid())
userId String
resumeType     String?
resumeTitle String?
description String?
photoUrl String?
themeColor String @default("#000000")
borderStyle String @default("squircle")
createdAt      DateTime        @default(now())
 updatedAt   DateTime @updatedAt
firstName   String?
  lastName    String?
  jobTitle    String?
  address     String?
  phone       String?
  email       String?
  userEmail   String?
  userName    String?
  website String?
  linkedin String?
  gitHub String?
  summary String?
techSkills TechSkill[]
workExperience WorkExperience[]
education Education[]
  skills String[]
  interest String[]
  User User[]
}

model WorkExperience {
  id String @id @default(cuid())
  position String?
  company String?
  startDate DateTime?
  endDate DateTime?
    location     String?
    duties           String?
  responsibilities String?
  accomplishments  String?
  clearance        String?
  grade            String?
  status           String?
  time             String?
description String?
resumeId String
resume Resume @relation(fields: [resumeId], references: [id],  onDelete: Cascade)
createdAt      DateTime        @default(now())
 updatedAt   DateTime @updatedAt
}
model TechSkill {
  id        String   @id @default(uuid())
  resumeId  String
  name      String?
  rating     Int?
  resume Resume @relation(fields: [resumeId], references: [id],  onDelete: Cascade)
  createdAt      DateTime        @default(now())
 updatedAt   DateTime @updatedAt
}
model Education {
  id String @id @default(cuid())
  degree String?
  school String?
  startDate DateTime?
  endDate DateTime?
    location     String?
description String?
resumeId String
resume Resume @relation(fields: [resumeId], references: [id],  onDelete: Cascade)
createdAt      DateTime        @default(now())
 updatedAt   DateTime @updatedAt
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("user_subscriptions")
}

model Job {
  id        String   @id @default(uuid())
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position  String
  company   String
  location  String
  mode      Mode
  status    String
}

enum Mode {
  FULLTIME
  PARTTIME
  INTERNSHIP
  CONTRACT
  APPRENTICESHIP
  SEASONAL
}